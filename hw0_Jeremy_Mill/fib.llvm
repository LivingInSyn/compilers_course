; ModuleID = "fib.llvm"
declare i32 @printf(i8*,...) ; import the prototype of printf

@msg = constant [9 x i8] c"got: %d\0A\00"

define i32 @recFib(i32 %n){
entry:
	;do a thing
	br label %first
first:
	%t0 = icmp sle i32 %n,1
    br i1 %t0, label %LtOrEqOne, label %GtOne
LtOrEqOne:
	;do a thing
	ret i32 %n
GtOne:
	;need n-1, n-2, then need to call recFib on both, then add them, then return that
	%t1 = sub i32 %n,1
	%t2 = sub i32 %n,2
	%t3 = call i32 @recFib(i32 %t1)
	%t4 = call i32 @recFib(i32 %t2)
	%t5 = add i32 %t3,%t4
	ret i32 %t5
}


define i32 @main(){
    %t1 = call i32 @recFib(i32 6)
    %t2 = call i32(i8*,...)* @printf(i8* bitcast ([9 x i8]* @msg to i8*),i32 %t1)
    ret i32 %t1
}
