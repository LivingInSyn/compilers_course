; ModuleID = "bSort.llvm"
declare i32 @printf(i8*,...)                           ; export the prototype of printf

declare i8* @malloc(i32)         ; the standard malloc function.
%AIPair = type { i32* , i32* }   ; a struct with two integers

declare void @initPair(%AIPair* %p,i32 %sz)
declare void @printPair(%AIPair* %p,i32 %sz)

@msg = constant [9 x i8]  c"got: %d\0A\00"

define i32 @main() {
entry:
	
	;allocate the pair, and store the pointer to it in %pair
	%pair = alloca %AIPair
	
	;make a size for the arrays, 50 entries, multiplied by 32
	%arrSize = mul i32 50,32
	
	;call malloc
	%from_mal = call i8* @malloc(i32 %arrSize)
	
	;get the ptr to the first element of the first array
	;this is actually a pointer to a pointer, which is the first element in the first array
	%ptr1 = getelementptr %AIPair* %pair,i32 0,i32 0
	
	;get the ptr to the first element of the second array
	;this is actually a pointer to a pointer, which is the first element in the second array
	%ptr2 = getelementptr %AIPair* %pair,i32 0,i32 1
	
	%t5 = call i32(i8*,...)* @printf(i8* bitcast ([9 x i8]* @msg to i8*),i8* %from_mal)
	%t3 = call i32(i8*,...)* @printf(i8* bitcast ([9 x i8]* @msg to i8*),i32** %ptr1)
	%t4 = call i32(i8*,...)* @printf(i8* bitcast ([9 x i8]* @msg to i8*),i32** %ptr2)
	
	call void @initPair(%AIPair* %pair, i32 %arrSize)
	call void @printPair(%AIPair* %pair, i32 %arrSize)
	
	
	

	ret i32 0
}