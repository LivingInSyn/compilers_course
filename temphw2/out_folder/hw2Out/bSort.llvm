; ModuleID = "bSort.llvm"
declare i32 @printf(i8*,...)                           ; export the prototype of printf

declare i8* @malloc(i32)         ; the standard malloc function.
%AIPair = type { i32* , i32* }   ; a struct with two integers
@size = constant i32 10

declare void @initPair(%AIPair* %p,i32 %sz)
declare void @printPair(%AIPair* %p,i32 %sz)

@msg = constant [9 x i8]  c"got: %d\0A\00"

define i32 @main() {
entry:
	;create a size 
	;%size = mul i32 50,32
	%s = load i32* @size
	
	;allocate memory for AIPair
	%pair = alloca %AIPair, align 8
	
	;memory or the two arrays
	%a = alloca [50 x i32], align 8
	%b = alloca [50 x i32], align 8
	
	;cast a and b to pointers
	%a_pntr = bitcast [50 x i32]* %a to i32*
	%b_pntr = bitcast [50 x i32]* %b to i32*
	
	;get the pntr to the first element of AIPair and the second element
	%aipair_a_pntr = getelementptr %AIPair* %pair, i32 0, i32 0 
	%aipair_b_pntr = getelementptr %AIPair* %pair, i32 0, i32 1
	
	;init the arrays
	call void @initPair(%AIPair* %pair, i32 %s)
	
	ret i32 0
	
	
}